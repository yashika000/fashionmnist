# -*- coding: utf-8 -*-
"""train_mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qcsZpsa2Ai3GNvQBXvAAzGqrt25FqCyf
"""

import numpy as np
import tensorflow as tf
import pandas as pd
import time
import os
from keras.utils.np_utils import to_categorical

print(tf.__version__)

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()
print("x_train shape:", x_train.shape, "y_train shape:", y_train.shape)

x_train = x_train.reshape(-1,28,28,1)
x_test = x_test.reshape(-1,28,28,1)

#Normalizatin
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255
print("x_train shape:", x_train.shape, "y_train shape:", y_train.shape)

y_train = to_categorical(y_train, num_classes = 10)
y_test = to_categorical(y_test, num_classes = 10)

# Train the model,complie it and fit it.
model = tf.keras.Sequential()
model.add(tf.keras.layers.Conv2D(32,kernel_size=(3, 3),padding = 'Same',activation='relu',kernel_initializer='he_normal',input_shape=(28,28, 1)))
model.add(tf.keras.layers.Conv2D(32,kernel_size=(3, 3),padding = 'Same',activation='relu'))
model.add(tf.keras.layers.MaxPooling2D((2, 2)))
model.add(tf.keras.layers.Dropout(0.25))
model.add(tf.keras.layers.Conv2D(64,kernel_size=(3, 3),padding = 'Same',activation='relu'))
model.add(tf.keras.layers.Conv2D(64,kernel_size=(3, 3),padding = 'Same',activation='relu'))
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))
model.add(tf.keras.layers.Dropout(0.25))
model.add(tf.keras.layers.Conv2D(64, (3, 3),padding = 'Same', activation='relu'))
model.add(tf.keras.layers.Dropout(0.3))
model.add(tf.keras.layers.Flatten(input_shape=(28, 28, 1)))
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dropout(0.25))
model.add(tf.keras.layers.Dense(10,activation=tf.nn.softmax))

model.compile(loss='categorical_crossentropy',
             optimizer='adam',
             metrics=['accuracy'])

model.summary()

model.fit(x_train,y_train,batch_size=34,epochs=30)

score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])


#save the model
model_path = './model'
os.makedirs(model_path, exist_ok=True)  
model_name = os.path.join(model_path, 'train_mnist')
# By default model is saved in as .pb file. To save model in h5 format do as below
# model_name = os.path.join(model_path, 'train_mnist.h5') 
os.makedirs(model_path, exist_ok=True)
model.save(model_name)